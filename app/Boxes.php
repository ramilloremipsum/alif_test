<?php

namespace App;


use App\Exceptions\BoxAlreadyExistsInWorkplace;
use App\Exceptions\BoxHasMaxCellsException;
use App\Exceptions\CellAlreadyExistsInBox;
use App\Helpers\Amate;
use App\Http\Requests\StoreCellRequest;
use Illuminate\Database\Eloquent\Model;

class Boxes extends Model
{

    const MAX_CELLS_COUNT = 8;
    protected $table = 'boxes';
    protected $fillable = ['title', 'description'];

    public function createCell(StoreCellRequest $request)
    {
        if ($this->hasMaxCells()) {
            throw new BoxHasMaxCellsException(static::MAX_CELLS_COUNT);
        }
        if ($this->cellAlreadyExists($request->get('title'))) {
            throw new CellAlreadyExistsInBox($this);
        }
        $cell = new Cells();
        $cell->box_id = $this->id;
        $cell->title = $request->get('title');
        $cell->description = $request->get('description');
        $cell->save();
        return $cell;
    }

    public function hasFolders()
    {
        return count($this->cells) > 0;
    }

    public function hasMaxCells()
    {
        $count = $this->cells()->count();
        return $count >= self::MAX_CELLS_COUNT;
    }

    public function cellAlreadyExists($title)
    {
        return Cells::query()->where('title', '=', $title)->where('box_id', '=', $this->id)->first();
    }

    public function workplace()
    {
        return $this->belongsTo('App\Workplaces', 'workplace_id', 'id');
    }

    public function cells()
    {
        return $this->hasMany('App\Cells', 'box_id', 'id');
    }

    public function update(array $attributes = [], array $options = [])
    {
        if ($this->workplace->boxAlreadyExists($attributes['title'])) { //todo refactor this code, it's not allowed to be here
            throw new BoxAlreadyExistsInWorkplace($this->workplace);
        }
        return parent::update($attributes, $options); // TODO: Change the autogenerated stub
    }
}
